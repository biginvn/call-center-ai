name: CD

on:
  push:
    branches:
      - main
      - staging

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.set-tag.outputs.image-tag }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Determine image tag
        id: set-tag
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          if [ "$BRANCH" = "main" ]; then
            echo "image-tag=latest" >> $GITHUB_OUTPUT
            echo "image-tag=latest" >> $GITHUB_OUTPUT
          else
            echo "image-tag=staging" >> $GITHUB_OUTPUT
            echo "image-tag=staging" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          push: true
          tags: npt1601/ai-call-center:${{ steps.set-tag.outputs.image-tag }}
          tags: npt1601/ai-call-center:${{ steps.set-tag.outputs.image-tag }}

  deploy:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Load SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy on EC2
        run: |
          IMAGE_TAG=${{ needs.build-and-push.outputs.image-tag }}
          if [ "$IMAGE_TAG" = "latest" ]; then
            PORT=8000; CONTAINER=app-prod
          else
            PORT=8001; CONTAINER=app-stg
          fi

          ssh -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.HOST }} <<EOF
            set -e
            cd /var/www/myapp

            # now $CONTAINER and $IMAGE_TAG are literal values
            docker rm -f ${CONTAINER} || true
            docker pull npt1601/ai-call-center:${IMAGE_TAG}
            docker rm -f $CONTAINER || true
            docker pull npt1601/ai-call-center:$IMAGE_TAG
            docker run -d \
              --env-file .env \
              -p ${PORT}:8000 \
              --name ${CONTAINER} \
              npt1601/ai-call-center:${IMAGE_TAG}
          EOF
